<?php

/**
 * @file
 * Exposes global functionality for creating formatters styles.
 */

/**
 * Implements hook_menu().
 */
function formatters_menu() {
  $items = array();
  
  $items['admin/config/formatters'] = array(
    'title' => 'Formatters',
    'description' => '',
    'page callback' => 'formatters_admin_list',
    'access arguments' => array('administer formatters'),
    'file' => 'formatters.admin.inc',
  );
  $items['admin/config/formatters/list'] = array(
    'title' => 'List',
    'description' => '',
    'page callback' => 'formatters_admin_list',
    'access arguments' => array('administer formatters'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'file' => 'formatters.admin.inc',
  );
  $items['admin/config/formatters/add'] = array(
    'title' => 'Add formatter',
    'description' => 'Add a new formatter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formatters_add_form'),
    'access arguments' => array('administer formatters'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 2,
    'file' => 'formatters.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_theme().
 */
function formatters_theme() {
  return array(
    // Theme functions in image.admin.inc.
    'formatters_admin_list' => array(
      'variables' => array('formatters' => NULL),
    )
  );
}

/**
 * Implements hook_entity_info().
 */
function formatters_entity_info() {  
  $info['formatters'] = array(
    'label' => t('Formatters TODO'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'Entity',
    'base table' => 'formatters',
    'module' => 'formatters',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'ffid',
      'name' => 'machine_name',
    ),
  );
  
  return $info;
}

/**
 * Implements hook_formatters_effect_info().
 *
 * @return
 *   An array of effects keyed by the effect machine name
 *   Effects should contains : 
 *     - "label" (required): The effect human name
 *     - "help" (optional): A help text
 *     - "effect callback" (required): A function name that should be triggered
 *       and applied
 *     - "options callback" (optional): 
 *     - "form callback" (optional): the form used to displayed the options.
 */
function formatters_formatters_effect_info() {
  $effects = array(
    'trim' => array(
      'label' => t('Trim'),
      'help' => t('Trim (TODO: complete me).'),
      'effect callback' => 'trim_effect',
      'options callback' => 'trim_options',
      'form callback' => 'trim_form',
    ),
  );
}

function trim_effect() {
    // TODO
}

function trim_options() {
    // TODO
}

function trim_form() {
    // TODO
}

/**
 * Returns a set of formatter effects.
 *
 * These formetter components are exposed by modules implementing
 * hook_formatters_component_info().
 *
 * @return
 *   An array of image effects to be used when transforming images.
 * @see hook_formatters_component_info()
 * @see formatters_component_definition_load()
 */
function formatters_component_definitions() {
  global $language;

  // hook_image_effect_info() includes translated strings, so each language is
  // cached separately.
  $langcode = $language->language;

  $components = &drupal_static(__FUNCTION__);

  if (!isset($components)) {
    if ($cache = cache_get("formatter_components:$langcode")) {
      $components = $cache->data;
    }
    else {
      $components = array();
      include_once drupal_get_path('module', 'formatters') . '/formatters.components.inc';
      foreach (module_implements('formatters_component_info') as $module) {
        foreach (module_invoke($module, 'formatters_component_info') as $name => $component) {
          // Ensure the current toolkit supports the effect.
          $component['module'] = $module;
          $component['name'] = $name;
          $component['data'] = isset($component['data']) ? $component['data'] : array();
          $components[$name] = $component;
        }
      }
      // uasort($effects, '_image_effect_definitions_sort');
      drupal_alter('formatters_component_info', $components);
      cache_set("formatter_components:$langcode", $components);
    }
  }

  return $components;
}

/**
 * Loads the definition for a formatter component.
 *
 * @param $component
 *   The name of the component definition to load.
 * @param $style
 *   An image style array to which this effect will be added.
 *
 * @return
 *   An array containing the image effect definition with the following keys:
 *   - "effect": The unique name for the effect being performed. Usually prefixed
 *     with the name of the module providing the effect.
 *   - "module": The module providing the effect.
 *   - "help": A description of the effect.
 *   - "function": The name of the function that will execute the effect.
 *   - "form": (optional) The name of a function to configure the effect.
 *   - "summary": (optional) The name of a theme function that will display a
 *     one-line summary of the effect. Does not include the "theme_" prefix.
 */
function formatters_component_definition_load($component/*, $style_name = NULL*/) {
  $definitions = formatters_component_definitions();

  // If a style is specified, do not allow loading of default style
  // effects.
  /*
  if (isset($style_name)) {
    $style = image_style_load($style_name, NULL);
    if ($style['storage'] == IMAGE_STORAGE_DEFAULT) {
      return FALSE;
    }
  }
  */
  return isset($definitions[$component]) ? $definitions[$component] : FALSE;
}

/**
 * Gets an array of all formatters styles and their settings.
 *
 * @return
 *   An array of formatters keyed by the formatter ID (ffid).
 * @see formatters_load()
 */
function formatters_get_list() {
  $formatters = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (!isset($formatters)) {
    if ($cache = cache_get('formatters_default_formatters', 'cache')) {
      $formatters = $cache->data;
    }
    else {
      $formatters = array();

      // Select the module-defined styles.
      foreach (module_implements('formatters_default_formatters') as $module) {
        $formatters = module_invoke($module, 'formatters_default_formatters');
        foreach ($formatters as $name => $formatter) {
          $formatter['name'] = $name;
          $formatter['module'] = $module;
          // $style['storage'] = IMAGE_STORAGE_DEFAULT;
          foreach ($formatter['components'] as $key => $component) {
            $definition = formatters_component_definition_load($component['name']); // @todo
            $component = array_merge($definition, $component);
            $formatter['component'][$key] = $component;
          }
          $formatters[$name] = $formatter;
        }
      }

      // Select all the user-defined styles.
      $user_formatters = db_select('formatters', NULL, array('fetch' => PDO::FETCH_ASSOC))
        ->fields('formatters')
        ->orderBy('machine_name')
        ->execute()
        ->fetchAllAssoc('machine_name', PDO::FETCH_ASSOC);

      // Allow the user styles to override the module styles.
      foreach ($user_formatters as $name => $formatter) {
        $formatter['module'] = NULL;
        $formatter['name'] = $formatter['machine_name'];
        // $style['storage'] = IMAGE_STORAGE_NORMAL;
        $formatter['components'] = formatters_components($formatter); //@todo
        if (isset($formatters[$name]['module'])) {
          $formatter['module'] = $formatters[$name]['module'];
          // $style['storage'] = IMAGE_STORAGE_OVERRIDE;
        }
        $formatters[$name] = $formatter;
      }

      drupal_alter('formatters_default_formatters', $formatters);
      cache_set('formatters_default_formatters', $formatters);
    }
  }

  return $formatters;
}

/**
 * Implements hook_formatters_default_formatters().
 *
 * @return
 *   An array of formatters styles, keyed by the style name.
 * 
 * Here for example purpose.
 */
function formatters_formatters_default_formatters() {
  $formatters = array();

  $formatters['trim_to_50'] = array(
    'components' => array(
      array(
        'name' => 'trim',
        'data' => array('lenght' => 50),
      ),
    )
  );
  $formatters['trim_to_100'] = array(
    'components' => array(
      array(
        'name' => 'trim',
        'data' => array('lenght' => 100),
      ),
    )
  );
  
  return $formatters;
}


/**
 * Returns a set of formatter effects.
 *
 * These formatters are exposed by modules implementing
 * hook_formatters_effect_info().
 *
 * @return
 *   An array of formatters effects to be used.
 */
function formatters_effect_definitions() {


  $effects = &drupal_static(__FUNCTION__);

  if (!isset($effects)) {
    if ($cache = cache_get("image_effects")) {
      $effects = $cache->data;
    }
    else {
      $effects = array();
      foreach (module_implements('formatters_effect_info') as $module) {
        foreach (module_invoke($module, 'formatters_effect_info') as $name => $effect) {
          // Ensure the current toolkit supports the effect.
          $effect['module'] = $module;
          $effect['name'] = $name;
          // TODO: To be completed. (see keys from formatters_formatters_effect_info()
          $effects[$name] = $effect;
        }
      }
      drupal_alter('image_effect_info', $effects);
      cache_set("image_effects", $effects);
    }
  }

  return $effects;
}
